// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"context"
	"github.com/google/wire"
	"github.com/y-yu/kindle-clock-go/config"
	"github.com/y-yu/kindle-clock-go/domain"
	"github.com/y-yu/kindle-clock-go/infra/api"
	"github.com/y-yu/kindle-clock-go/infra/cache"
	"github.com/y-yu/kindle-clock-go/presenter"
	"github.com/y-yu/kindle-clock-go/repository"
	"github.com/y-yu/kindle-clock-go/usecase"
)

// Injectors from wire.go:

func RoomInfoHandler(ctx context.Context) *presenter.RoomInfoHandler {
	natureRemoConfiguration := config.NewNatureRemoConfiguration(ctx)
	natureRemoAPIClient := api.NewNatureRemoAPIClient(natureRemoConfiguration)
	natureRemoRepository := repository.NewNatureRemoRepository(natureRemoAPIClient, natureRemoConfiguration)
	switchBotConfiguration := config.NewSwitchBotConfiguration(ctx)
	switchBotAPIClient := api.NewSwitchBotAPIClient(switchBotConfiguration)
	cacheClient := cache.NewSwitchBotCacheClient(ctx)
	systemClock := domain.NewSystemClock()
	switchBotRepository := repository.NewSwitchBotRepository(switchBotAPIClient, cacheClient, switchBotConfiguration, systemClock)
	awairConfiguration := config.NewAwairConfiguration(ctx)
	awairAPIClient := api.NewAwairAPIClient(awairConfiguration)
	domainCacheClient := cache.NewAwairCacheClient(ctx)
	awairRepository := repository.NewAwairRepository(awairConfiguration, awairAPIClient, domainCacheClient, systemClock)
	openWeatherMapConfiguration := config.NewOpenWeatherMapConfiguration(ctx)
	openWeatherMapAPIClient := api.NewOpenWeatherMapAPIClient(openWeatherMapConfiguration)
	openWeatherMapRepository := repository.NewOpenWeatherMapRepository(openWeatherMapAPIClient)
	getRoomInfoUsecase := usecase.NewGetRoomInfoUsecase(natureRemoRepository, switchBotRepository, awairRepository, openWeatherMapRepository)
	authenticationConfiguration := config.NewAuthenticationConfiguration(ctx)
	fontConfiguration := config.NewFontConfiguration(ctx)
	roomInfoHandler := presenter.NewRoomInfoHandler(getRoomInfoUsecase, authenticationConfiguration, fontConfiguration, systemClock)
	return roomInfoHandler
}

func ClockHandler(ctx context.Context) *presenter.ClockHandler {
	fontConfiguration := config.NewFontConfiguration(ctx)
	systemClock := domain.NewSystemClock()
	clockHandler := presenter.NewClockHandler(fontConfiguration, systemClock)
	return clockHandler
}

func HealthHandler(ctx context.Context) *presenter.HealthHandler {
	healthHandler := presenter.NewHealthHandler()
	return healthHandler
}

// wire.go:

var binding = wire.NewSet(domain.NewSystemClock, config.NewAwairConfiguration, config.NewAuthenticationConfiguration, config.NewFontConfiguration, config.NewNatureRemoConfiguration, config.NewOpenWeatherMapConfiguration, config.NewRedisConfiguration, config.NewSwitchBotConfiguration, api.NewAwairAPIClient, api.NewNatureRemoAPIClient, api.NewSwitchBotAPIClient, api.NewOpenWeatherMapAPIClient, cache.NewAwairCacheClient, cache.NewSwitchBotCacheClient, repository.NewAwairRepository, repository.NewNatureRemoRepository, repository.NewSwitchBotRepository, repository.NewOpenWeatherMapRepository, usecase.NewGetRoomInfoUsecase, presenter.NewRoomInfoHandler, presenter.NewClockHandler, presenter.NewHealthHandler, wire.Bind(
	new(domain.Clock),
	new(*domain.SystemClock),
),
)
